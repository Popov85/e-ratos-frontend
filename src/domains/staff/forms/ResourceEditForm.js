import React, {useState} from 'react'
import PropTypes from "prop-types";
import {Field, reduxForm} from 'redux-form';
import {minLength2, minLength8, required} from "../../../utils/validators";
import {FaSignInAlt, FaTimes} from "react-icons/fa";
import FieldText from "../../common/forms/controls/FieldText";
import ResourcePreloader from "../components/ResourcePreloader";
import {parse} from 'himalaya'
import Failure from "../../common/components/Failure";
import FieldStringBadge from "../../common/forms/controls/FieldStringBadge";
import FieldSelectBadge from "../../common/forms/controls/FieldSelectBadge";

let ResourceEditForm = props => {

    const [parsingError, setParsingError] = useState(null);

    const initParsedIframe = () => {
        if (props.initialValues) {
            const {link, width, height} = props.initialValues;
            return {link, width, height};
        }
        return null;
    }

    const [parsedIframe, setParsedIframe] = useState(initParsedIframe());

    const iframeChanged = html => {
        setParsingError(null);
        try {
            const object = parse(html);
            if (object.length !== 1)
                throw new Error("Failed to parse the iframe..");
            const link = object[0].attributes.find(a => a.key === 'src').value;
            const width = object[0].attributes.find(a => a.key === 'width').value;
            const height = object[0].attributes.find(a => a.key === 'height').value;
            if (!link || link.length < 5)
                throw new Error("Cannot determine the URL!");
            if (!width || width.length < 1)
                throw new Error("Cannot determine the width!");
            if (!height || width.height < 1)
                throw new Error("Cannot determine the height!");
            props.change("link", link);
            props.change("width", width);
            props.change("height", height);
            setParsedIframe({link, width, height});
        } catch (e) {
            setParsingError(e);
        }
    }


    const {disabled, finished} = props;

    return (
        <form onSubmit={props.handleSubmit}>
            <fieldset disabled={disabled || finished}>
                {
                    parsingError &&
                    <div className="alert alert-danger text-center p-1" role="alert">
                        <span className="text-danger">
                            <strong>
                                <Failure message={parsingError.message}/>
                            </strong>
                        </span>
                    </div>
                }

                <Field name="resourceId" component="input" type={"text"} hidden/>

                <Field name="iframe" component={FieldText} onChange={(html) => iframeChanged(html.target.value)}
                       placeholder="You can insert iframe here, generated by your resource store.."/>

                <fieldset disabled={!parsedIframe}>

                    <Field name="description" component={FieldText} placeholder="Description"
                           validate={[required, minLength8]}/>

                    <Field name="link" component={FieldText} placeholder="URL"
                           validate={[required, minLength8]}
                           onChange={(link) => setParsedIframe({...parsedIframe, link: link.target.value})}/>

                    <div className="d-flex align-items-baseline">
                        <Field name="width" component={FieldStringBadge} placeholder="Enter width (px)" label="Width"
                               validate={[required, minLength2]}
                               onChange={(width) => setParsedIframe({...parsedIframe, width: width.target.value})}/>
                        <div className="p-2"><FaTimes color="grey"/></div>
                        <Field name="height" component={FieldStringBadge} placeholder="Enter height (px)" label="Height"
                               validate={[required, minLength2]}
                               onChange={(height) => setParsedIframe({...parsedIframe, height: height.target.value})}/>
                        <div className="p-2"><FaTimes color="grey"/></div>
                        <Field name="type" component={FieldSelectBadge} badge="Type"
                               items={[
                                   {label: 'Select', value: ''},
                                   {label: 'image', value: 'image'},
                                   {label: 'audio', value: 'audio'},
                                   {label: 'video', value: 'video'},
                                   {label: 'misc.', value: 'misc.'}]} validate={[required]}/>
                    </div>

                </fieldset>

                {
                    parsedIframe && !parsingError &&
                    <div className="text-center">
                        <ResourcePreloader
                            message="Loading.."
                            url={parsedIframe.link}
                            width={parsedIframe.width}
                            height={parsedIframe.height}/>
                    </div>
                }

                <div className="form-group text-center mb-n1">
                    <button type="submit" value="Save" className="btn btn-sm btn-success mr-2">
                        <div className="align-middle">Save&nbsp; <FaSignInAlt color="white"/></div>
                    </button>
                </div>
            </fieldset>
        </form>);
}

ResourceEditForm.propTypes = {
    disabled: PropTypes.bool.isRequired,
    finished: PropTypes.bool.isRequired,

    handleSubmit: PropTypes.func.isRequired
};

ResourceEditForm = reduxForm({form: 'resource-edit', enableReinitialize: true})(ResourceEditForm);

export default ResourceEditForm;