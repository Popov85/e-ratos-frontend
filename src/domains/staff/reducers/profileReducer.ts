import {createSlice} from "@reduxjs/toolkit";
import {getPasswordUpdated, getProfileUpdated} from "../actions/profileAction";

// Define the state interface
type ProfileState = {
    isProfileUpdating: boolean;
    isPasswordUpdating: boolean;
    errorMessageUpdatingProfile: string | null;
    errorMessageUpdatingPassword: string | null;
    message: string | null;
}

const initState: ProfileState = {
    isProfileUpdating: false,
    isPasswordUpdating: false,
    errorMessageUpdatingProfile: null,
    errorMessageUpdatingPassword: null,
    message: null
}

const profileSlice = createSlice({
    name: 'profile',
    initialState: initState,
    reducers: {
        clearUserProfileFailure(state) {
            state.errorMessageUpdatingProfile = null;
            state.message = null;
        },
        clearUserPasswordFailure(state) {
            state.errorMessageUpdatingPassword = null;
            state.message = null;
        },
    },
    extraReducers: (builder) => {
        // Handle profile update async thunk
        builder.addCase(getProfileUpdated.pending, (state) => {
            state.isProfileUpdating = true;
            state.errorMessageUpdatingProfile = null;
        });
        builder.addCase(getProfileUpdated.fulfilled, (state) => {
            state.isProfileUpdating = false;
            state.message = 'Successfully updated profile!';
        });
        builder.addCase(getProfileUpdated.rejected, (state, action) => {
            state.isProfileUpdating = false;
            state.errorMessageUpdatingProfile = action.payload ?? 'Failed to update profile';
        });
        // Handle password update async thunk
        builder.addCase(getPasswordUpdated.pending, (state) => {
            state.isPasswordUpdating = true;
            state.errorMessageUpdatingPassword = null;
        });
        builder.addCase(getPasswordUpdated.fulfilled, (state) => {
            state.isPasswordUpdating = false;
            state.message = 'Successfully updated password!';
        });
        builder.addCase(getPasswordUpdated.rejected, (state, action) => {
            state.isPasswordUpdating = false;
            state.errorMessageUpdatingPassword = action.payload ?? 'Failed to update password';
        });
    }
});

// Export the actions generated by createSlice
export const {
    clearUserProfileFailure,
    clearUserPasswordFailure
} = profileSlice.actions;

// Export the reducer
export default profileSlice.reducer;




